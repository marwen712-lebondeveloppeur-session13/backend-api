# # ‚úÖ Name of the Workflow
# name: Pipeline CI/CD Backend-api

# # ‚úÖ Trigger this workflow on push to main branch
# on:
#   push: 
#     branches:
#       - main

# # ‚úÖ Global Environment Variables
# env:
#   BUILD_NUMBER: ${{ github.run_number }}  # Unique build number for the pipeline run
#   IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/backend-api:${{ github.run_number }}
#   BACKEND_URL: "https://api.lebondeveloppeur.net"  # Health check endpoint of the backend API
#   HEALTH_PATH: "/health"
#   PORT: 3001  # Define a configurable port.
  
# jobs:
#   # ‚úÖ Run Unit Tests
#   unit-test-job:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Clone Source Code
#         uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'

#       - name: Install dependencies
#         run: npm install

#       - name: Run unit tests
#         run: npm test

#   # ‚úÖ Static Code Analysis (SonarQube)
#   sonarqube-code-quality-scan-job:
#     runs-on: ubuntu-latest
#     needs: unit-test-job  # Run after tests
#     steps:
#       - name: Clone Source Code
#         uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'

#       - name: Install dependencies
#         run: npm install

#       - name: SonarQube Scan
#         uses: sonarsource/sonarqube-scan-action@master
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


#   # ‚úÖ Vulnerability Scanning (Snyk)
#   snyk-code-security-scan-job:
#     runs-on: ubuntu-latest
#     needs: [sonarqube-code-quality-scan-job]
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4

#       - name: Install Dependency Scanning Tool (Snyk)
#         run: npm install -g snyk

#       - name: Snyk Authentication
#         run: snyk auth ${{ secrets.SNYK_TOKEN }}

#       - name: Run Snyk Vulnerability Scan
#         run: snyk test

#   # ‚úÖ Docker Image Scanning (Trivy)
#   trivy-image-security-scan-job:
#     runs-on: ubuntu-latest
#     needs: [sonarqube-code-quality-scan-job]
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4

#       - name: Install dependencies
#         run: sudo apt-get update && sudo apt-get install -y curl

#       - name: Download and install Trivy
#         run: |
#           curl -sSL https://github.com/aquasecurity/trivy/releases/download/v0.29.0/trivy_0.29.0_Linux-64bit.tar.gz -o trivy.tar.gz
#           tar xzvf trivy.tar.gz
#           sudo mv trivy /usr/local/bin/
#           trivy --version

#       - name: Run Trivy Docker image vulnerability scan
#         run: |
#           docker build -t ${{ env.IMAGE_NAME }} .
#           trivy image ${{ env.IMAGE_NAME }}

#   # ‚úÖ Build and Push Docker Image
#   build-and-push-job:
#     runs-on: ubuntu-latest
#     needs: [snyk-code-security-scan-job, trivy-image-security-scan-job]  # Wait for all security scans
#     steps:
#       - name: Clone Source Code
#         uses: actions/checkout@v4

#       - name: Build Docker image
#         run: docker build -t ${{ env.IMAGE_NAME }} .

#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Push Docker image 
#         run: docker push ${{ env.IMAGE_NAME }}

#   # ‚úÖ Deploy to VPS
#   deploy-job:
#     runs-on: ubuntu-latest
#     needs: build-and-push-job  
#     steps:
#       - name: Connect to the VPS using SSH
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.VPS_HOST }}
#           username: ${{ secrets.VPS_USERNAME }}
#           password: ${{ secrets.VPS_PASSWORD }}
#           script: |
#             # Create Docker network if it doesn't exist
#             sudo docker network inspect backend-api-net || sudo docker network create backend-api-net

#             # Backup current image if running
#             if sudo docker ps -a --format '{{.Names}}' | grep -q 'backend-api'; then
#               current_image=$(sudo docker inspect backend-api --format='{{.Config.Image}}')
#               echo "Tagging current image ($current_image) as backup"
#               sudo docker tag $current_image backend-api:backup
#             fi

#             # Pull the latest Docker image
#             sudo docker pull ${{ env.IMAGE_NAME }}

#             # Remove the old container if it exists
#             sudo docker ps -q --filter name=backend-api | grep -q . && sudo docker rm -f backend-api || echo "No existing container to remove"

#             # Run the new container with environment variables
#             sudo docker run -d \
#               --name backend-api \
#               --network backend-api-net \
#               -p ${{ env.PORT }}:${{ env.PORT }} \
#               -e NODE_ENV=production \
#               -e MONGO_URI=${{ secrets.MONGO_URI }} \
#               --restart=always \
#               ${{ env.IMAGE_NAME }}

#             # Shows running containers
#             sudo docker ps

#             # Clean up unused images.
#             #sudo docker image prune -f

#   # ‚úÖ 8. Health Check & Slack Notification
#   health-check-job:
#     runs-on: ubuntu-latest
#     needs: deploy-job  # Run health check only after deployment
#     steps:
#       - name: Health Check - Verify Backend Availability
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.BACKEND_URL }}${{ env.HEALTH_PATH }}")
#           echo "Received response code: $response"
#           if [ "$response" -ne 200 ]; then
#             echo "Health check failed with response code $response"
#             exit 1
#           else
#             echo "Health check passed successfully!"
#           fi

#       - name: Notify Slack on Success
#         if: success()
#         uses: slackapi/slack-github-action@v1.23.0
#         with:
#           payload: |
#             {
#               "text": "‚úÖ *Pipeline CI/CD Backend-api termin√© avec succ√®s !*\nüîÅ Branche: `${{ github.ref_name }}`\nüèó Build: `${{ env.BUILD_NUMBER }}`\nüîó [Voir le workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
#             }
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

#       - name: Notify Slack on Failure
#         if: failure()
#         uses: slackapi/slack-github-action@v1.23.0
#         with:
#           payload: |
#             {
#               "text": "‚ùå *√âchec du pipeline CI/CD Backend-api* ‚ùóÔ∏è\nüîÅ Branche: `${{ github.ref_name }}`\nüîó [Voir les logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
#             }
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

#   # ‚úÖ Rollback when health check fails
#   rollback-job:
#     runs-on: ubuntu-latest
#     needs: health-check-job
#     if: failure()
#     steps:
#       - name: Rollback to Backup Image on VPS.
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.VPS_HOST }}
#           username: ${{ secrets.VPS_USERNAME }}
#           password: ${{ secrets.VPS_PASSWORD }}
#           script: |
#             echo "‚ö†Ô∏è Health check failed. Starting rollback."

#             # Remove broken container
#             sudo docker rm -f backend-api || true

#             # Start container using backup image
#             sudo docker run -d --name backend-api --network backend-api-net -p ${{ env.PORT }}:${{ env.PORT }} -e NODE_ENV=production -e MONGO_URI=${{ secrets.MONGO_URI }} --restart always backend-api:backup

#             sudo docker ps

#       - name: Notify Slack on Rollback
#         uses: slackapi/slack-github-action@v1.23.0
#         with:
#           payload: |
#             {
#               "text": "üîÅ *Rollback effectu√© suite √† un √©chec du d√©ploiement !*\nüö® Image de secours utilis√©e : `backend-api:backup`\nüîó [Voir les logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
#             }
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      
