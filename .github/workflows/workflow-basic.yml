name: Basic workflow develop

# --------------------
# D√©clencheurs (Triggers)
# Ici, le workflow se lance automatiquement √† chaque push sur la branche `main`
# --------------------
on:
  push:
    branches:
      - main

# --------------------
# Variables globales
# Ici, on d√©finit l‚Äôimage Docker qui sera construite et pouss√©e sur DockerHub
# --------------------
env:
  DOCKER_IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/api-session13

jobs:
  # ========================================================
  # 1 - JOB : Ex√©cuter les tests unitaires
  # ========================================================
  run-unit-test-job:
    runs-on: ubuntu-latest   # Machine virtuelle Ubuntu
    steps:
      # √âtape 1 : R√©cup√©rer le code source depuis le repo
      - name: clone source code to runner 
        uses: actions/checkout@v5

      # √âtape 2 : Installer les d√©pendances (Node.js/NPM)
  #     - name: install dependencies
  #       run: npm i

  #     # √âtape 3 : Lancer les tests unitaires d√©finis dans package.json
  #     - name: run unit test
  #       run: npm run test
  # # ========================================================
  #  JOB : Ex√©cuter les tests avec SONARQUBE
  # ========================================================        
  sonarqube-code-quality-scan-job:
    needs: run-unit-test-job
    runs-on: ubuntu-latest
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # ========================================================
  #  JOB : Ex√©cuter les tests avec Snyk
  # ======================================================== 

  # snyk-code-security-scan-job:
  #   runs-on: ubuntu-latest
  #   needs: run-unit-test-job
  #   steps:

  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js (if applicable)
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Install Dependency Scanning Tool (Snyk)
  #       run: npm install -g snyk

  #     - name: Snyk Authentication
  #       run: snyk auth ${{ secrets.SNYK_TOKEN }}
  #     - name: Run Snyk
  #       run: snyk test --all-projects
  #       continue-on-error: true

  #     - name: Run Snyk Vulnerability Scan
  #       run: snyk monitor --all-projects --org=marwen712
  #       # continue-on-error: false

  #     - name: Notify Slack on Success
  #       if: success()
  #       uses: slackapi/slack-github-action@v1.23.0
  #       with:
  #         payload: |
  #           {
  #             "text": "‚úÖ Snyk job success !*\nüîÅ Branche: `${{ github.ref_name }}`\nüèó Build: `${{ env.BUILD_NUMBER }}`\nüîó [Voir le workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
  #           }
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  #     - name: Notify Slack on Failure
  #       if: failure()
  #       uses: slackapi/slack-github-action@v1.23.0
  #       with:
  #         payload: |
  #           {
  #             "text": "‚ùå Snyk job failed ‚ùóÔ∏è\nüîÅ Branche: `${{ github.ref_name }}`\nüîó [Voir les logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
  #           }
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
  snyk-code-security-scan-job:
    runs-on: ubuntu-latest
    needs: run-unit-test-job
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      # -------------------------
      # Run Snyk Test (fail if vulnerabilities found)
      # -------------------------
      - name: Run Snyk Test
        id: snyk_test
        run: snyk test --all-projects --org=marwen712

      # -------------------------
      # Run Snyk Monitor and extract URL
      # -------------------------
      - name: Run Snyk Monitor
        id: snyk_monitor
        run: |
          OUTPUT=$(snyk monitor --all-projects --org=marwen712)
          echo "$OUTPUT"
          # extract snyk monitor URL
          URL=$(echo "$OUTPUT" | grep -Eo 'https://app.snyk.io[^ ]+' | tail -n1)
          echo "SNYK_URL=$URL" >> $GITHUB_ENV
          echo "url=$URL" >> $GITHUB_OUTPUT

      # -------------------------
      # Slack success notification
      # -------------------------
      - name: Notify Slack on Success
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "‚úÖ *Snyk scan passed!*\nüîÅ Branch: `${{ github.ref_name }}`\nüîó [View Snyk Report](${{ steps.snyk_monitor.outputs.url }})"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      # -------------------------
      # Slack failure notification
      # -------------------------
      - name: Notify Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "‚ùå *Snyk scan failed!*\nüîÅ Branch: `${{ github.ref_name }}`\n‚ö†Ô∏è Vulnerabilities detected.\n"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}


      # -------------------------
      # Notify Slack on Failure
      # -------------------------
      - name: Notify Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "‚ùå *Snyk scan failed!*\nüîÅ Branch: `${{ github.ref_name }}`\nüîó [Workflow Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ========================================================
  # 2 - JOB : Construire et pousser l‚Äôimage Docker
  # (ne s‚Äôex√©cute que si les tests unitaires passent)
  # ========================================================
  build-docker-image-and-push:
    needs: [sonarqube-code-quality-scan-job, snyk-code-security-scan-job]  # D√©pend du job pr√©c√©dent
    runs-on: ubuntu-latest
    steps:
        # √âtape 1 : R√©cup√©rer le code source
        - name: clone source code to runner
          uses: actions/checkout@v5

        # √âtape 2 : Construire l‚Äôimage Docker
        - name: build docker image
          run: docker build -t ${{ env.DOCKER_IMAGE }} .

        # √âtape 3 : Taguer l‚Äôimage avec un num√©ro de version bas√© sur `run_number`
        - name: tag docker image
          run: docker tag ${{ env.DOCKER_IMAGE }} ${{ env.DOCKER_IMAGE }}:v${{ github.run_number }}

        # √âtape 4 : V√©rifier que les images existent bien en local
        - name: show docker images
          run: docker images

        # √âtape 5 : (Optionnel) Afficher le username et token (debug)
        - name: show docker username and access-token
          run: |
            echo ${{ vars.DOCKERHUB_USERNAME }}
            echo ${{ secrets.DOCKERHUB_TOKEN }}

        # √âtape 6 : Se connecter √† DockerHub avec login/password (token)
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        # √âtape 7 : Pousser l‚Äôimage versionn√©e sur DockerHub
        - name: push image to dockerhub
          run: docker push ${{ env.DOCKER_IMAGE }}:v${{ github.run_number }}

        # √âtape 8 : Pousser √©galement le tag `latest`
        - name: push latest image to dockerhub
          run: docker push ${{ env.DOCKER_IMAGE }}:latest

  # ========================================================
  # 3 - JOB : D√©ploiement sur un VPS
  # (ne s‚Äôex√©cute que si l‚Äôimage a √©t√© build + push)
  # ========================================================
  deploy-to-vps:
    runs-on: ubuntu-latest
    needs: build-docker-image-and-push
    steps:
      # √âtape 1 : Se connecter en SSH sur le VPS
      #           et ex√©cuter des commandes de d√©ploiement
      - name: Execute remote SSH commands using password
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}   # Adresse IP/nom du VPS
          username: user                  # Nom d‚Äôutilisateur (√† adapter)
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # Aller dans le dossier o√π est ton projet Docker Compose

            cd /home/user/devops-script/backend-api/dev

            # Tirer la derni√®re image depuis DockerHub

            sudo docker compose pull api

            # Red√©marrer le container avec la nouvelle image

            sudo docker compose up -d --force-recreate --remove-orphans api
